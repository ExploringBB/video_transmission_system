/* Generated by C:\OpenDDS-3.18.1\bin\opendds_idl version 3.18.1 (ACE version 7.0.5) running on input file msg.idl */
#include "msgTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/XTypes/TypeObject.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

static const XTypes::TypeMap& get_minimal_type_map();
} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL



/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: OpenDDS */


/* End MODULE: OpenDDS */


/* Begin MODULE: msg */



/* Begin TYPEDEF: ImgData */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<msg_ImgData_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL,XTypes::EquivalenceHashWrapper(96, 60, 172, 38, 159, 97, 64, 8, 230, 97, 178, 61, 237, 35));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<msg_ImgData_xtag>()
{
  return get_minimal_type_map();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::msg::ImgData_forany& arr)
{
  ACE_UNUSED_ARG(arr);
  for (CORBA::ULong i0 = 0; i0 < 40000; ++i0) {
    arr[i0] = 0;
  }
}

void serialized_size(const Encoding& encoding, size_t& size, const  ::msg::ImgData_forany& arr)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(arr);
  primitive_serialized_size_octet(encoding, size, 40000);
}

bool operator<<(Serializer& strm, const  ::msg::ImgData_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  return strm.write_octet_array(arr.in(), 40000);
}

bool operator>>(Serializer& strm,  ::msg::ImgData_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  return strm.read_octet_array(arr.out(), 40000);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser,  ::msg::ImgData_forany*)
{
  ACE_UNUSED_ARG(ser);
  const Encoding& encoding = ser.encoding();
  ACE_UNUSED_ARG(encoding);
  return ser.skip(40000, 1);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ImgData */


/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<msg_Message_xtag>()
{
  static XTypes::TypeIdentifier ti;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), ti);
  if (ti.kind() == XTypes::TK_NONE) {
    ti = XTypes::TypeIdentifier(XTypes::EK_MINIMAL,XTypes::EquivalenceHashWrapper(53, 29, 137, 169, 43, 82, 79, 149, 197, 120, 241, 164, 173, 241));
  }
  return ti;
}

template<> const XTypes::TypeMap& getMinimalTypeMap<msg_Message_xtag>()
{
  return get_minimal_type_map();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::msg::Message& value)
{
  ACE_UNUSED_ARG(value_reader);
  ACE_UNUSED_ARG(value);
  static const ListMemberHelper::Pair pairs[] = {{"subject",0},{"subject_id",1},{"time_num",2},{"pre_time",3},{"text",4},{"count",5},{"img",6},{0,0}};
  ListMemberHelper helper(pairs);
  if (!value_reader.begin_struct()) return false;
  XTypes::MemberId member_id;
  while (value_reader.begin_struct_member(member_id, helper)) {
    switch (member_id) {
    case 0: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.subject = x.c_str();
      }
      break;
    }
    case 1: {
      if (!value_reader.read_int32(value.subject_id)) return false;
      break;
    }
    case 2: {
      if (!value_reader.read_int32(value.time_num)) return false;
      break;
    }
    case 3: {
      if (!value_reader.read_int32(value.pre_time)) return false;
      break;
    }
    case 4: {
      {
        String x;
        if (!value_reader.read_string(x)) return false;
        value.text = x.c_str();
      }
      break;
    }
    case 5: {
      if (!value_reader.read_int32(value.count)) return false;
      break;
    }
    case 6: {
      if (!value_reader.begin_array()) return false;
      for (unsigned int i = 0; i != 40000; ++i) {
        if (!value_reader.begin_element()) return false;
        if (!value_reader.read_byte(value.img[i])) return false;
        if (!value_reader.end_element()) return false;
      }
      if (!value_reader.end_array()) return false;
      break;
    }
    }
    if (!value_reader.end_struct_member()) return false;
  }
  if (!value_reader.end_struct()) return false;
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::msg::Message& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  value_writer.begin_struct();
  value_writer.begin_struct_member("subject");
  value_writer.write_string(value.subject);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("subject_id");
  value_writer.write_int32(value.subject_id);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("time_num");
  value_writer.write_int32(value.time_num);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("pre_time");
  value_writer.write_int32(value.pre_time);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("text");
  value_writer.write_string(value.text);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("count");
  value_writer.write_int32(value.count);
  value_writer.end_struct_member();
  value_writer.begin_struct_member("img");
  value_writer.begin_array();
  for (unsigned int i = 0; i != 40000; ++i) {
    value_writer.begin_element(i);
    value_writer.write_byte(value.img[i]);
    value_writer.end_element();
  }
  value_writer.end_array();
  value_writer.end_struct_member();
  value_writer.end_struct();
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::msg::Message& stru)
{
  ACE_UNUSED_ARG(stru);
  stru.subject = "";
  stru.subject_id = 0;
  stru.time_num = 0;
  stru.pre_time = 0;
  stru.text = "";
  stru.count = 0;
   ::msg::ImgData_forany stru_img_temp(const_cast< ::msg::ImgData_slice*>(stru.img));
  set_default(stru_img_temp);
}

void serialized_size(const Encoding& encoding, size_t& size, const  ::msg::Message& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
   ::msg::ImgData_forany stru_img_forany(const_cast< ::msg::ImgData_slice*>(stru.img));
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.subject.in()) + 1;
  primitive_serialized_size(encoding, size, stru.subject_id);
  primitive_serialized_size(encoding, size, stru.time_num);
  primitive_serialized_size(encoding, size, stru.pre_time);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.text.in()) + 1;
  primitive_serialized_size(encoding, size, stru.count);
  serialized_size(encoding, size, stru_img_forany);
}

bool operator<<(Serializer& strm, const  ::msg::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
   ::msg::ImgData_forany stru_img_forany(const_cast< ::msg::ImgData_slice*>(stru.img));
  return (strm << stru.subject.in())
    && (strm << stru.subject_id)
    && (strm << stru.time_num)
    && (strm << stru.pre_time)
    && (strm << stru.text.in())
    && (strm << stru.count)
    && (strm << stru_img_forany);
}

bool operator>>(Serializer& strm,  ::msg::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

   ::msg::ImgData_forany stru_img_forany(const_cast< ::msg::ImgData_slice*>(stru.img));
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.subject.out())) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.subject_id)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.time_num)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.pre_time)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.text.out())) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.count)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru_img_forany)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const  ::msg::Message>& stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size_delimiter(encoding, size);
  }
   ::msg::ImgData_forany stru_value_img_forany(const_cast< ::msg::ImgData_slice*>(stru.value.img));
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.subject.in()) + 1;
  primitive_serialized_size(encoding, size, stru.value.subject_id);
  primitive_serialized_size(encoding, size, stru.value.time_num);
  primitive_serialized_size(encoding, size, stru.value.pre_time);
  primitive_serialized_size_ulong(encoding, size);
  size += ACE_OS::strlen(stru.value.text.in()) + 1;
  primitive_serialized_size(encoding, size, stru.value.count);
  serialized_size(encoding, size, stru_value_img_forany);
}

bool operator<<(Serializer& strm, const NestedKeyOnly<const  ::msg::Message>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    serialized_size(encoding, total_size, stru);
    if (!strm.write_delimiter(total_size)) {
      return false;
    }
  }
   ::msg::ImgData_forany stru_value_img_forany(const_cast< ::msg::ImgData_slice*>(stru.value.img));
  return (strm << stru.value.subject.in())
    && (strm << stru.value.subject_id)
    && (strm << stru.value.time_num)
    && (strm << stru.value.pre_time)
    && (strm << stru.value.text.in())
    && (strm << stru.value.count)
    && (strm << stru_value_img_forany);
}

bool operator>>(Serializer& strm, const NestedKeyOnly< ::msg::Message>& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  const Encoding& encoding = strm.encoding();
  ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      return false;
    }
  }
  const size_t end_of_struct = strm.rpos() + total_size;

   ::msg::ImgData_forany stru_value_img_forany(const_cast< ::msg::ImgData_slice*>(stru.value.img));
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.subject.out())) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.subject_id)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.time_num)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.pre_time)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.text.out())) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru.value.count)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() >= end_of_struct) {
    return true;
  }
  if (!(strm >> stru_value_img_forany)) {
    return false;
  }
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2 &&
      strm.rpos() < end_of_struct) {
    strm.skip(end_of_struct - strm.rpos());
  }
  return true;
}

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::msg::Message> stru)
{
  ACE_UNUSED_ARG(encoding);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(stru);
  switch (encoding.xcdr_version()) {
  case Encoding::XCDR_VERSION_NONE:
    {
    primitive_serialized_size(encoding, size, stru.value.subject_id);
    break;
    }
  case Encoding::XCDR_VERSION_1:
    {
    primitive_serialized_size(encoding, size, stru.value.subject_id);
    break;
    }
  case Encoding::XCDR_VERSION_2:
    {
    primitive_serialized_size(encoding, size, stru.value.subject_id);
    break;
    }
  }
}

bool operator<<(Serializer& strm, KeyOnly<const  ::msg::Message> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.value.subject_id);
}

bool operator>>(Serializer& strm, KeyOnly< ::msg::Message> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.value.subject_id);
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace msg {
::DDS::DataWriter_ptr MessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Message> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr MessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr MessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Message, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& MessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Message>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool MessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key();
}

const char* MessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

void MessageTypeSupportImpl::representations_allowed_by_type(
  ::DDS::DataRepresentationIdSeq& seq)
{
  MarshalTraitsType::representations_allowed_by_type(seq);
}

const OpenDDS::XTypes::TypeIdentifier& MessageTypeSupportImpl::getMinimalTypeIdentifier() const
{
  return OpenDDS::DCPS::getMinimalTypeIdentifier<OpenDDS::DCPS::msg_Message_xtag>();
}

const OpenDDS::XTypes::TypeMap& MessageTypeSupportImpl::getMinimalTypeMap() const
{
  return OpenDDS::DCPS::getMinimalTypeMap<OpenDDS::DCPS::msg_Message_xtag>();
}

OpenDDS::DCPS::Extensibility MessageTypeSupportImpl::getExtensibility() const
{
  return MarshalTraitsType::extensibility();
}

MessageTypeSupport::_ptr_type MessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl< ::msg::Message> : MetaStruct {
  typedef  ::msg::Message T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool isDcpsKey(const char* field) const
  {
    if (!ACE_OS::strcmp(field, "subject_id")) {
      return true;
    }
    return false;
  }

  ACE_CDR::ULong map_name_to_id(const char* field) const
  {
    static const std::pair<std::string, ACE_CDR::ULong> name_to_id_pairs[] = {
      std::make_pair("subject", 0),
      std::make_pair("subject_id", 1),
      std::make_pair("time_num", 2),
      std::make_pair("pre_time", 3),
      std::make_pair("text", 4),
      std::make_pair("count", 5),
      std::make_pair("img", 6),
    };
    static const std::map<std::string, ACE_CDR::ULong> name_to_id_map(name_to_id_pairs, name_to_id_pairs + 7);
    std::map<std::string, ACE_CDR::ULong>::const_iterator it = name_to_id_map.find(field);
    if (it == name_to_id_map.end()) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::msg::Message)");
    } else {
      return it->second;
    }
  }

  Value getValue(const void* stru, const char* field) const
  {
    const  ::msg::Message& typed = *static_cast<const  ::msg::Message*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "subject") == 0) {
      return typed.subject.in();
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return typed.subject_id;
    }
    if (std::strcmp(field, "time_num") == 0) {
      return typed.time_num;
    }
    if (std::strcmp(field, "pre_time") == 0) {
      return typed.pre_time;
    }
    if (std::strcmp(field, "text") == 0) {
      return typed.text.in();
    }
    if (std::strcmp(field, "count") == 0) {
      return typed.count;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::msg::Message)");
  }

  Value getValue(Serializer& strm, const char* field) const
  {
    const Encoding& encoding = strm.encoding();
    ACE_UNUSED_ARG(encoding);
  size_t total_size = 0;
  if (encoding.xcdr_version() == Encoding::XCDR_VERSION_2) {
    if (!strm.read_delimiter(total_size)) {
      throw std::runtime_error("Unable to reader delimiter in getValue");
    }
  }
    std::string base_field = field;
    size_t index = base_field.find('.');
    std::string subfield;
    if (index != std::string::npos) {
      subfield = base_field.substr(index + 1);
      base_field = base_field.substr(0, index);
    }
    if (base_field == "subject") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'subject' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'subject' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'subject' contents could not be skipped");
      }
    }
    if (base_field == "subject_id") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'subject_id' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'subject_id' could not be skipped");
      }
    }
    if (base_field == "time_num") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'time_num' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'time_num' could not be skipped");
      }
    }
    if (base_field == "pre_time") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'pre_time' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'pre_time' could not be skipped");
      }
    }
    if (base_field == "text") {
      TAO::String_Manager val;
      if (!(strm >> val.out())) {
        throw std::runtime_error("Field 'text' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(strm >> len)) {
        throw std::runtime_error("String 'text' length could not be deserialized");
      }
      if (!strm.skip(len)) {
        throw std::runtime_error("String 'text' contents could not be skipped");
      }
    }
    if (base_field == "count") {
      ACE_CDR::Long val;
      if (!(strm >> val)) {
        throw std::runtime_error("Field 'count' could not be deserialized");
      }
      return val;
    } else {
      if (!strm.skip(1,  4 )) {
        throw std::runtime_error("Field 'count' could not be skipped");
      }
    }
    if (!gen_skip_over(strm, static_cast< ::msg::ImgData_forany*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Did not find field in getValue");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "subject") == 0) {
      return make_field_cmp(&T::subject, next);
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return make_field_cmp(&T::subject_id, next);
    }
    if (std::strcmp(field, "time_num") == 0) {
      return make_field_cmp(&T::time_num, next);
    }
    if (std::strcmp(field, "pre_time") == 0) {
      return make_field_cmp(&T::pre_time, next);
    }
    if (std::strcmp(field, "text") == 0) {
      return make_field_cmp(&T::text, next);
    }
    if (std::strcmp(field, "count") == 0) {
      return make_field_cmp(&T::count, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::msg::Message)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"subject", "subject_id", "time_num", "pre_time", "text", "count", "img", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "subject") == 0) {
      return &static_cast<const T*>(stru)->subject;
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return &static_cast<const T*>(stru)->subject_id;
    }
    if (std::strcmp(field, "time_num") == 0) {
      return &static_cast<const T*>(stru)->time_num;
    }
    if (std::strcmp(field, "pre_time") == 0) {
      return &static_cast<const T*>(stru)->pre_time;
    }
    if (std::strcmp(field, "text") == 0) {
      return &static_cast<const T*>(stru)->text;
    }
    if (std::strcmp(field, "count") == 0) {
      return &static_cast<const T*>(stru)->count;
    }
    if (std::strcmp(field, "img") == 0) {
      return &static_cast<const T*>(stru)->img;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::msg::Message)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "subject") == 0) {
      static_cast<T*>(lhs)->subject = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "subject_id") == 0) {
      static_cast<T*>(lhs)->subject_id = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "time_num") == 0) {
      static_cast<T*>(lhs)->time_num = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "pre_time") == 0) {
      static_cast<T*>(lhs)->pre_time = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "text") == 0) {
      static_cast<T*>(lhs)->text = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "count") == 0) {
      static_cast<T*>(lhs)->count = *static_cast<const  ::CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "img") == 0) {
       ::msg::ImgData* lhsArr = &static_cast<T*>(lhs)->img;
      const  ::msg::ImgData* rhsArr = static_cast<const  ::msg::ImgData*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 40000; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::msg::Message)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "subject") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->subject.in(), static_cast<const T*>(rhs)->subject.in());
    }
    if (std::strcmp(field, "subject_id") == 0) {
      return static_cast<const T*>(lhs)->subject_id == static_cast<const T*>(rhs)->subject_id;
    }
    if (std::strcmp(field, "time_num") == 0) {
      return static_cast<const T*>(lhs)->time_num == static_cast<const T*>(rhs)->time_num;
    }
    if (std::strcmp(field, "pre_time") == 0) {
      return static_cast<const T*>(lhs)->pre_time == static_cast<const T*>(rhs)->pre_time;
    }
    if (std::strcmp(field, "text") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->text.in(), static_cast<const T*>(rhs)->text.in());
    }
    if (std::strcmp(field, "count") == 0) {
      return static_cast<const T*>(lhs)->count == static_cast<const T*>(rhs)->count;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ::msg::Message)");
  }
};

template<>
const MetaStruct& getMetaStruct< ::msg::Message>()
{
  static MetaStructImpl< ::msg::Message> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser,  ::msg::Message*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl< ::msg::Message>().getValue(ser, "");
  return true;
}

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Message */

/* End MODULE: msg */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

namespace {
XTypes::TypeObject to0()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalStructType(XTypes::IS_APPENDABLE | XTypes::IS_NESTED,XTypes::MinimalStructHeader(XTypes::TypeIdentifier(XTypes::TK_NONE), XTypes::MinimalTypeDetail()),XTypes::MinimalStructMemberSeq().append(XTypes::MinimalStructMember(XTypes::CommonStructMember(0,XTypes::TRY_CONSTRUCT1,XTypes::TypeIdentifier(XTypes::TI_STRING8_SMALL,XTypes::StringSTypeDefn(0))),XTypes::MinimalMemberDetail(181, 227, 55, 78))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(1,XTypes::TRY_CONSTRUCT1,XTypes::TypeIdentifier(XTypes::TK_INT32)),XTypes::MinimalMemberDetail(255, 171, 161, 209))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(2,XTypes::TRY_CONSTRUCT1,XTypes::TypeIdentifier(XTypes::TK_INT32)),XTypes::MinimalMemberDetail(162, 178, 144, 116))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(3,XTypes::TRY_CONSTRUCT1,XTypes::TypeIdentifier(XTypes::TK_INT32)),XTypes::MinimalMemberDetail(39, 61, 220, 163))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(4,XTypes::TRY_CONSTRUCT1,XTypes::TypeIdentifier(XTypes::TI_STRING8_SMALL,XTypes::StringSTypeDefn(0))),XTypes::MinimalMemberDetail(28, 178, 81, 236))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(5,XTypes::TRY_CONSTRUCT1,XTypes::TypeIdentifier(XTypes::TK_INT32)),XTypes::MinimalMemberDetail(226, 148, 42, 4))).append(XTypes::MinimalStructMember(XTypes::CommonStructMember(6,XTypes::TRY_CONSTRUCT1,XTypes::TypeIdentifier(XTypes::EK_MINIMAL,XTypes::EquivalenceHashWrapper(96, 60, 172, 38, 159, 97, 64, 8, 230, 97, 178, 61, 237, 35))),XTypes::MinimalMemberDetail(183, 152, 171, 230))))));
}
XTypes::TypeObject to1()
{
  return XTypes::TypeObject(XTypes::MinimalTypeObject(XTypes::MinimalAliasType(0,XTypes::MinimalAliasHeader(),XTypes::MinimalAliasBody(XTypes::CommonAliasBody(0,XTypes::TypeIdentifier(XTypes::TI_PLAIN_ARRAY_LARGE,XTypes::PlainArrayLElemDefn(XTypes::PlainCollectionHeader(XTypes::EK_BOTH,XTypes::TRY_CONSTRUCT1),XTypes::LBoundSeq().append(40000),XTypes::TypeIdentifier(XTypes::TK_BYTE))))))));
}
XTypes::TypeMap get_minimal_type_map_private()
{
  XTypes::TypeMap tm;
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL,XTypes::EquivalenceHashWrapper(53, 29, 137, 169, 43, 82, 79, 149, 197, 120, 241, 164, 173, 241))] = to0();
  tm[XTypes::TypeIdentifier(XTypes::EK_MINIMAL,XTypes::EquivalenceHashWrapper(96, 60, 172, 38, 159, 97, 64, 8, 230, 97, 178, 61, 237, 35))] = to1();
  return tm;
}
}
const XTypes::TypeMap& get_minimal_type_map()
{
  static XTypes::TypeMap tm;
  ACE_GUARD_RETURN(ACE_Thread_Mutex, guard, TheServiceParticipant->get_static_xtypes_lock(), tm);
  if (tm.empty()) {
    tm = get_minimal_type_map_private();
  }
  return tm;
}
} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

